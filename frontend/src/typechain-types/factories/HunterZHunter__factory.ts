/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { HunterZHunter, HunterZHunterInterface } from "../HunterZHunter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "huntId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "imageReference",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "HuntAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "huntId",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "prize",
        type: "uint256",
      },
    ],
    name: "PrizeWon",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "huntId",
        type: "string",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "description",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "imageReference",
        type: "string",
      },
      {
        internalType: "string",
        name: "target",
        type: "string",
      },
    ],
    name: "addHunt",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "verifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "huntId",
        type: "string",
      },
      {
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyAndAwardPrize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200115038038062001150833981810160405281019062000037919062000129565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b610fe5806200016b6000396000f3fe60806040526004361061003f5760003560e01c80632b7ac3f31461004457806348136ecc1461006f578063708e2853146100985780638da5cb5b146100b4575b600080fd5b34801561005057600080fd5b506100596100df565b60405161006691906104e9565b60405180910390f35b34801561007b57600080fd5b506100966004803603810190610091919061072b565b610105565b005b6100b260048036038101906100ad91906107ec565b610229565b005b3480156100c057600080fd5b506100c96103e9565b6040516100d69190610926565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610111838361040d565b905080610153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014a9061099e565b60405180910390fd5b60006002856040516101659190610a38565b9081526020016040518091039020600301549050600060028660405161018b9190610a38565b9081526020016040518091039020600301819055508373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101e6573d6000803e3d6000fd5b507fe31b9173645f67fc802cc3e3cd155ebd5da61367196de64d4efbfd87e7118e7d85858360405161021a93929190610a97565b60405180910390a15050505050565b6003866040516102399190610a38565b908152602001604051809103902060009054906101000a900460ff1615610295576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028c90610b47565b60405180910390fd5b600034116102d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102cf90610bb3565b60405180910390fd5b60006002876040516102ea9190610a38565b908152602001604051809103902090508681600001908161030b9190610ddf565b508581600101908161031d9190610ddf565b508481600201908161032f9190610ddf565b50348160030181905550838160040181905550828160050190816103539190610ddf565b50818160060190816103659190610ddf565b5060016003886040516103789190610a38565b908152602001604051809103902060006101000a81548160ff0219169083151502179055507f16dfca623eff0e602c550df792e47c93c37bcc0d78811849a75bf8ae4380710e878787348888886040516103d89796959493929190610eb1565b60405180910390a150505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049590610f8f565b60405180910390fd5b6001905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d3826104a8565b9050919050565b6104e3816104c8565b82525050565b60006020820190506104fe60008301846104da565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61056b82610522565b810181811067ffffffffffffffff8211171561058a57610589610533565b5b80604052505050565b600061059d610504565b90506105a98282610562565b919050565b600067ffffffffffffffff8211156105c9576105c8610533565b5b6105d282610522565b9050602081019050919050565b82818337600083830152505050565b60006106016105fc846105ae565b610593565b90508281526020810184848401111561061d5761061c61051d565b5b6106288482856105df565b509392505050565b600082601f83011261064557610644610518565b5b81356106558482602086016105ee565b91505092915050565b610667816104c8565b811461067257600080fd5b50565b6000813590506106848161065e565b92915050565b600067ffffffffffffffff8211156106a5576106a4610533565b5b6106ae82610522565b9050602081019050919050565b60006106ce6106c98461068a565b610593565b9050828152602081018484840111156106ea576106e961051d565b5b6106f58482856105df565b509392505050565b600082601f83011261071257610711610518565b5b81356107228482602086016106bb565b91505092915050565b6000806000606084860312156107445761074361050e565b5b600084013567ffffffffffffffff81111561076257610761610513565b5b61076e86828701610630565b935050602061077f86828701610675565b925050604084013567ffffffffffffffff8111156107a05761079f610513565b5b6107ac868287016106fd565b9150509250925092565b6000819050919050565b6107c9816107b6565b81146107d457600080fd5b50565b6000813590506107e6816107c0565b92915050565b60008060008060008060c087890312156108095761080861050e565b5b600087013567ffffffffffffffff81111561082757610826610513565b5b61083389828a01610630565b965050602087013567ffffffffffffffff81111561085457610853610513565b5b61086089828a01610630565b955050604087013567ffffffffffffffff81111561088157610880610513565b5b61088d89828a01610630565b945050606061089e89828a016107d7565b935050608087013567ffffffffffffffff8111156108bf576108be610513565b5b6108cb89828a01610630565b92505060a087013567ffffffffffffffff8111156108ec576108eb610513565b5b6108f889828a01610630565b9150509295509295509295565b6000610910826104a8565b9050919050565b61092081610905565b82525050565b600060208201905061093b6000830184610917565b92915050565b600082825260208201905092915050565b7f50726f6f66206e6f742076657269666965640000000000000000000000000000600082015250565b6000610988601283610941565b915061099382610952565b602082019050919050565b600060208201905081810360008301526109b78161097b565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156109f25780820151818401526020810190506109d7565b83811115610a01576000848401525b50505050565b6000610a12826109be565b610a1c81856109c9565b9350610a2c8185602086016109d4565b80840191505092915050565b6000610a448284610a07565b915081905092915050565b6000610a5a826109be565b610a648185610941565b9350610a748185602086016109d4565b610a7d81610522565b840191505092915050565b610a91816107b6565b82525050565b60006060820190508181036000830152610ab18186610a4f565b9050610ac060208301856104da565b610acd6040830184610a88565b949350505050565b7f68756e7420776974682070726f766964656420696420616c726561647920657860008201527f6973747300000000000000000000000000000000000000000000000000000000602082015250565b6000610b31602483610941565b9150610b3c82610ad5565b604082019050919050565b60006020820190508181036000830152610b6081610b24565b9050919050565b7f7072697a652063616e6e6f74206265207a65726f000000000000000000000000600082015250565b6000610b9d601483610941565b9150610ba882610b67565b602082019050919050565b60006020820190508181036000830152610bcc81610b90565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c1a57607f821691505b602082108103610c2d57610c2c610bd3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c58565b610c9f8683610c58565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610cdc610cd7610cd2846107b6565b610cb7565b6107b6565b9050919050565b6000819050919050565b610cf683610cc1565b610d0a610d0282610ce3565b848454610c65565b825550505050565b600090565b610d1f610d12565b610d2a818484610ced565b505050565b5b81811015610d4e57610d43600082610d17565b600181019050610d30565b5050565b601f821115610d9357610d6481610c33565b610d6d84610c48565b81016020851015610d7c578190505b610d90610d8885610c48565b830182610d2f565b50505b505050565b600082821c905092915050565b6000610db660001984600802610d98565b1980831691505092915050565b6000610dcf8383610da5565b9150826002028217905092915050565b610de8826109be565b67ffffffffffffffff811115610e0157610e00610533565b5b610e0b8254610c02565b610e16828285610d52565b600060209050601f831160018114610e495760008415610e37578287015190505b610e418582610dc3565b865550610ea9565b601f198416610e5786610c33565b60005b82811015610e7f57848901518255600182019150602085019450602081019050610e5a565b86831015610e9c5784890151610e98601f891682610da5565b8355505b6001600288020188555050505b505050505050565b600060e0820190508181036000830152610ecb818a610a4f565b90508181036020830152610edf8189610a4f565b90508181036040830152610ef38188610a4f565b9050610f026060830187610a88565b610f0f6080830186610a88565b81810360a0830152610f218185610a4f565b905081810360c0830152610f358184610a4f565b905098975050505050505050565b7f6e6f7420616e206f776e65720000000000000000000000000000000000000000600082015250565b6000610f79600c83610941565b9150610f8482610f43565b602082019050919050565b60006020820190508181036000830152610fa881610f6c565b905091905056fea264697066735822122005e5685135a544291565ee066d0e1cde643403e41d878362915a7a08bc28d73f64736f6c634300080f0033";

type HunterZHunterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HunterZHunterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HunterZHunter__factory extends ContractFactory {
  constructor(...args: HunterZHunterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<HunterZHunter> {
    return super.deploy(_verifier, overrides || {}) as Promise<HunterZHunter>;
  }
  override getDeployTransaction(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifier, overrides || {});
  }
  override attach(address: string): HunterZHunter {
    return super.attach(address) as HunterZHunter;
  }
  override connect(signer: Signer): HunterZHunter__factory {
    return super.connect(signer) as HunterZHunter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HunterZHunterInterface {
    return new utils.Interface(_abi) as HunterZHunterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HunterZHunter {
    return new Contract(address, _abi, signerOrProvider) as HunterZHunter;
  }
}
