/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface HunterZHunterInterface extends utils.Interface {
  functions: {
    "addHunt(string,string,string,uint256,string,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyAndAwardPrize(string,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addHunt"
      | "owner"
      | "verifier"
      | "verifyAndAwardPrize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addHunt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyAndAwardPrize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addHunt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndAwardPrize",
    data: BytesLike
  ): Result;

  events: {
    "HuntAdded(string,string,string,uint256,uint256,string,string)": EventFragment;
    "PrizeWon(string,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HuntAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrizeWon"): EventFragment;
}

export interface HuntAddedEventObject {
  huntId: string;
  name: string;
  description: string;
  prize: BigNumber;
  endTime: BigNumber;
  imageReference: string;
  target: string;
}
export type HuntAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, string, string],
  HuntAddedEventObject
>;

export type HuntAddedEventFilter = TypedEventFilter<HuntAddedEvent>;

export interface PrizeWonEventObject {
  huntId: string;
  winner: string;
  prize: BigNumber;
}
export type PrizeWonEvent = TypedEvent<
  [string, string, BigNumber],
  PrizeWonEventObject
>;

export type PrizeWonEventFilter = TypedEventFilter<PrizeWonEvent>;

export interface HunterZHunter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HunterZHunterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addHunt(
      huntId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      imageReference: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    verifyAndAwardPrize(
      huntId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addHunt(
    huntId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    endTime: PromiseOrValue<BigNumberish>,
    imageReference: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  verifier(overrides?: CallOverrides): Promise<string>;

  verifyAndAwardPrize(
    huntId: PromiseOrValue<string>,
    winner: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addHunt(
      huntId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      imageReference: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    verifier(overrides?: CallOverrides): Promise<string>;

    verifyAndAwardPrize(
      huntId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HuntAdded(string,string,string,uint256,uint256,string,string)"(
      huntId?: null,
      name?: null,
      description?: null,
      prize?: null,
      endTime?: null,
      imageReference?: null,
      target?: null
    ): HuntAddedEventFilter;
    HuntAdded(
      huntId?: null,
      name?: null,
      description?: null,
      prize?: null,
      endTime?: null,
      imageReference?: null,
      target?: null
    ): HuntAddedEventFilter;

    "PrizeWon(string,address,uint256)"(
      huntId?: null,
      winner?: null,
      prize?: null
    ): PrizeWonEventFilter;
    PrizeWon(huntId?: null, winner?: null, prize?: null): PrizeWonEventFilter;
  };

  estimateGas: {
    addHunt(
      huntId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      imageReference: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyAndAwardPrize(
      huntId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addHunt(
      huntId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      imageReference: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyAndAwardPrize(
      huntId: PromiseOrValue<string>,
      winner: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
