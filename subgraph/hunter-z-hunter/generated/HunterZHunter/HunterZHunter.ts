// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HuntAdded extends ethereum.Event {
  get params(): HuntAdded__Params {
    return new HuntAdded__Params(this);
  }
}

export class HuntAdded__Params {
  _event: HuntAdded;

  constructor(event: HuntAdded) {
    this._event = event;
  }

  get huntId(): string {
    return this._event.parameters[0].value.toString();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get prize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get target(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class PrizeWon extends ethereum.Event {
  get params(): PrizeWon__Params {
    return new PrizeWon__Params(this);
  }
}

export class PrizeWon__Params {
  _event: PrizeWon;

  constructor(event: PrizeWon) {
    this._event = event;
  }

  get huntId(): string {
    return this._event.parameters[0].value.toString();
  }

  get winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get prize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class HunterZHunter extends ethereum.SmartContract {
  static bind(address: Address): HunterZHunter {
    return new HunterZHunter("HunterZHunter", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _verifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddHuntCall extends ethereum.Call {
  get inputs(): AddHuntCall__Inputs {
    return new AddHuntCall__Inputs(this);
  }

  get outputs(): AddHuntCall__Outputs {
    return new AddHuntCall__Outputs(this);
  }
}

export class AddHuntCall__Inputs {
  _call: AddHuntCall;

  constructor(call: AddHuntCall) {
    this._call = call;
  }

  get huntId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get endTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get target(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddHuntCall__Outputs {
  _call: AddHuntCall;

  constructor(call: AddHuntCall) {
    this._call = call;
  }
}

export class VerifyAndAwardPrizeCall extends ethereum.Call {
  get inputs(): VerifyAndAwardPrizeCall__Inputs {
    return new VerifyAndAwardPrizeCall__Inputs(this);
  }

  get outputs(): VerifyAndAwardPrizeCall__Outputs {
    return new VerifyAndAwardPrizeCall__Outputs(this);
  }
}

export class VerifyAndAwardPrizeCall__Inputs {
  _call: VerifyAndAwardPrizeCall;

  constructor(call: VerifyAndAwardPrizeCall) {
    this._call = call;
  }

  get huntId(): string {
    return this._call.inputValues[0].value.toString();
  }

  get winner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proof(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class VerifyAndAwardPrizeCall__Outputs {
  _call: VerifyAndAwardPrizeCall;

  constructor(call: VerifyAndAwardPrizeCall) {
    this._call = call;
  }
}
